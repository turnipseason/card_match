import telebot
from telebot import types
import psycopg2
from data.db_connect import DatabaseConnection
from source.agent import agent
from dotenv import load_dotenv
import os

from langchain_core.messages import AIMessage, HumanMessage, SystemMessage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("config/ggc_env.env")

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

db_con = DatabaseConnection()

user_data = {}
user_chat_sessions = {}
error_counters = {}

bot.set_my_commands([
    telebot.types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    telebot.types.BotCommand("cards", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–∞—Ä—Ç"),
    telebot.types.BotCommand("cashback", "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ –∫–∞—Ä—Ç–∞–º –∫—ç—à–±–µ–∫"),
    telebot.types.BotCommand("match", "–ù–∞—á–∞—Ç—å —á–∞—Å —Å —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Ä—Ç"),
    telebot.types.BotCommand("exit", "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Ä—Ç"),
    telebot.types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
])

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', callback_data='registre')
    btn2 = types.InlineKeyboardButton('–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', callback_data='auth')
    markup.row(btn1, btn2)
    bot.reply_to(message, '–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç?', reply_markup=markup)

@bot.message_handler(commands=['cards'])
def show_cards(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cards. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    user = user_data.get(chat_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not user:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    passport_id = user['passport_id']
    print(f"–ü–∞—Å–ø–æ—Ä—Ç: {passport_id}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(db_con.conn_params)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    cards = db_con.get_client_cards(passport_id)
    print(f"–ö–∞—Ä—Ç—ã: {cards}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if not cards:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")
    else:
        response = "–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for card in cards:
            response += (
                f"\nüîπ {card['card_name']} ({card['bank_name']})\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {int(card['client_rate'])}%\n"
                f"–ì–æ–¥–æ–≤–∞—è –ø–ª–∞—Ç–∞: {card['client_annual_fee']} —Ä—É–±.\n"
                f"–ü–°–ö: {card['client_psk'] if card['client_psk'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}%\n"
                f"–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {card['client_grace_period']} –¥–Ω–µ–π\n"
                f"–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: {card['credit_limit']} —Ä—É–±.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {card['max_reward'] if card['max_reward'] else 0} —Ä—É–±.\n"
                f"–û–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: {card['usual_purchase'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            )
        bot.send_message(chat_id, response)


@bot.message_handler(commands=['cashback'])
def show_cashback(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)

    if not user:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    passport_id = user['passport_id']

    cursor = db_con.connection.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute("SELECT card_id FROM client_card WHERE passport_id = %s", (passport_id,))
    cards = cursor.fetchall()

    if not cards:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    response = "üì¢ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ—à–±–µ–∫–∞:\n"

    for card in cards:
        card_id = card[0]  # –ë–µ—Ä–µ–º card_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        cursor.execute(
            """
            SELECT 
                ccc.passport_id,
                ccc.card_id,
                c.name AS card_name,
                cb.name AS cashback_category_name,
                ccc.cashback_rate,
                ccc.created_at
            FROM client_card_cashback ccc
            JOIN cashback_category cb ON ccc.cashback_category_id = cb.id
            JOIN client_card cc ON ccc.passport_id = cc.passport_id AND ccc.card_id = cc.card_id
            JOIN card c ON cc.card_id = c.id
            WHERE ccc.passport_id = %s AND ccc.card_id = %s;
            """, (passport_id, card_id)
        )

        cashbacks = cursor.fetchall()

        if not cashbacks:
            response += f"\nüí≥ –ö–∞—Ä—Ç–∞ : –ù–µ—Ç –∫–µ—à–±—ç–∫–∞\n"
        else:
            response += f"\nüí≥ –ö–∞—Ä—Ç–∞ {cashbacks[0][2]} :\n"
            for cashback in cashbacks:
                response += (f"üîπ {cashback[3]} ‚Äî {cashback[4]}%\n")  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è + –∫–µ—à–±—ç–∫%

    bot.send_message(chat_id, response)

@bot.message_handler(commands=['help'])
def help_command(message):
    commands = [
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        "/cards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç",
        "/cashback - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ –∫–∞—Ä—Ç–∞–º –∫—ç—à–±–µ–∫",
        "/match - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Ä—Ç",
        "/exit - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ —Å —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Ä—Ç",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    ]
    bot.send_message(message.chat.id, "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands))

@bot.callback_query_handler(func=lambda callback: True)
def callback_auth(callback):
    chat_id = callback.message.chat.id
    print(f"chat_id: {chat_id}")
    if callback.data == 'registre':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞):")
        bot.register_next_step_handler_by_chat_id(chat_id, get_passport)
    elif callback.data == 'auth':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        bot.register_next_step_handler_by_chat_id(chat_id, check_user)
    elif callback.data in ['cashback', 'bonus', 'both', 'none']:
        save_preferences(callback)

def get_passport(message):
    chat_id = message.chat.id
    passport_id = message.text.strip()

    if len(passport_id) != 10 or not passport_id.isdigit():
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return bot.register_next_step_handler_by_chat_id(chat_id, get_passport)

    user_data[chat_id] = {'passport_id': passport_id}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_full_name)


def get_full_name(message):
    chat_id = message.chat.id
    full_name = message.text.strip().split()

    if len(full_name) < 2:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return bot.register_next_step_handler_by_chat_id(chat_id, get_full_name)

    user_data[chat_id].update({
        'last_name': full_name[0],
        'first_name': full_name[1],
        'middle_name': full_name[2] if len(full_name) > 2 else None
    })

    ask_preferences(chat_id)


def ask_preferences(chat_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞."""
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ö–µ—à–±–µ–∫', callback_data='cashback')
    btn2 = types.InlineKeyboardButton('–ë–æ–Ω—É—Å—ã', callback_data='bonus')
    btn3 = types.InlineKeyboardButton('–ö–µ—à–±–µ–∫ –∏ –±–æ–Ω—É—Å—ã', callback_data='both')
    btn4 = types.InlineKeyboardButton('–ù–∏—á–µ–≥–æ', callback_data='none')
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    bot.send_message(chat_id, "–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", reply_markup=markup)

def save_preferences(callback):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –ë–î."""
    chat_id = callback.message.chat.id
    choice = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è prefers_cashback –∏ prefers_bonus
    preferences = {
        'cashback': (True, False),
        'bonus': (False, True),
        'both': (True, True),
        'none': (False, False)
    }

    prefers_cashback, prefers_bonus = preferences[choice]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_user_to_db(chat_id, prefers_cashback, prefers_bonus)


def save_user_to_db(chat_id, prefers_cashback, prefers_bonus):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    user = user_data.get(chat_id)
    if not user:
        return

    try:
        cursor = db_con.connection.cursor()
        cursor.execute(
            "INSERT INTO client (passport_id, first_name, last_name, middle_name, prefers_cashback, prefers_bonus) "
            "VALUES (%s, %s, %s, %s, %s, %s)",
            (user['passport_id'], user['first_name'], user['last_name'], user['middle_name'], prefers_cashback, prefers_bonus)
        )
        db_con.connection.commit()
        bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
    except psycopg2.IntegrityError:
        db_con.connection.rollback()
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç –ø–∞—Å–ø–æ—Ä—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    finally:
        user_data.pop(chat_id, None)

def check_user(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
    chat_id = message.chat.id
    passport_id = message.text.strip()

    cursor = db_con.connection.cursor()
    cursor.execute("SELECT first_name, last_name, middle_name FROM client WHERE passport_id = %s", (passport_id,))
    user = cursor.fetchone()

    if user:
        bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[1]} {user[0]}!")
        user_data[chat_id] = {'passport_id': passport_id}
        check_and_request_card_details(chat_id, passport_id)
    else:
        bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

def check_and_request_card_details(chat_id, passport_id):
    cursor = db_con.connection.cursor()
    cursor.execute(
        """
        SELECT cc.card_id, c.name, c.bank_name 
        FROM client_card cc
        JOIN card c ON cc.card_id = c.id
        WHERE cc.passport_id = %s 
        AND (cc.rate IS NULL OR cc.annual_fee IS NULL OR cc.grace_period IS NULL OR cc.credit_limit IS NULL)
        """, (passport_id,)
    )
    incomplete_cards = cursor.fetchall()

    if incomplete_cards:
        user_data[chat_id] = {
            'passport_id': passport_id,
            'cards': [{'card_id': card[0], 'name': card[1], 'bank_name': card[2]} for card in incomplete_cards]
        }
        bot.send_message(chat_id, "–£ –≤–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç—ã —Å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏. –î–∞–≤–∞–π—Ç–µ –∏—Ö –∑–∞–ø–æ–ª–Ω–∏–º!")
        request_card_details(chat_id)
    else:
        bot.send_message(chat_id, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–∏–º –∫–∞—Ä—Ç–∞–º —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")

def request_card_details(chat_id):
    if not user_data.get(chat_id) or not user_data[chat_id]['cards']:
        bot.send_message(chat_id, "–í—Å–µ –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
        return

    card = user_data[chat_id]['cards'].pop(0)
    user_data[chat_id]['current_card'] = card['card_id']
    bot.send_message(chat_id, f"–ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã \"{card['name']}\" –±–∞–Ω–∫–∞ \"{card['bank_name']}\".")

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19.5):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_rate)


def get_rate(message):
    chat_id = message.chat.id
    try:
        rate = float(message.text)
        user_data[chat_id]['rate'] = rate
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø–ª–∞—Ç—É (–µ—Å–ª–∏ –Ω–µ—Ç, —É–∫–∞–∂–∏—Ç–µ 0):")
        bot.register_next_step_handler_by_chat_id(chat_id, get_annual_fee)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_rate)

def get_annual_fee(message):
    chat_id = message.chat.id
    try:
        annual_fee = int(message.text)
        user_data[chat_id]['annual_fee'] = annual_fee
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞ (PSK) –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_psk)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø–ª–∞—Ç—É —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_annual_fee)

def get_psk(message):
    chat_id = message.chat.id
    try:
        psk = float(message.text)
        user_data[chat_id]['psk'] = psk
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤ –¥–Ω—è—Ö):")
        bot.register_next_step_handler_by_chat_id(chat_id, get_grace_period)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ PSK —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_psk)

def get_grace_period(message):
    chat_id = message.chat.id
    try:
        grace_period = int(message.text)
        user_data[chat_id]['grace_period'] = grace_period
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000):")
        bot.register_next_step_handler_by_chat_id(chat_id, get_credit_limit)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ª—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_grace_period)

def get_credit_limit(message):
    chat_id = message.chat.id
    try:
        credit_limit = int(message.text)
        user_data[chat_id]['credit_limit'] = credit_limit
        save_card_details(chat_id)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_credit_limit)

def save_card_details(chat_id):
    data = user_data.get(chat_id)
    if not data:
        return

    try:
        cursor = db_con.connection.cursor()
        cursor.execute(
            """
            UPDATE client_card
            SET rate = %s, annual_fee = %s, psk = %s, grace_period = %s, credit_limit = %s
            WHERE passport_id = %s AND card_id = %s
            """,
            (data['rate'], data['annual_fee'], data['psk'], data['grace_period'], data['credit_limit'], data['passport_id'], data['current_card'])
        )
        db_con.connection.commit()

        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ")
        request_card_details(chat_id)
    except psycopg2.Error as e:
        db_con.connection.rollback()
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@bot.message_handler(commands=['match'])
def start_match(message):
    chat_id = message.chat.id
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ msg_hndlr_match:{chat_id}")
    error_counters[chat_id] = 0
    thread_id = str(chat_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ thread_id
    user_chat_sessions[chat_id] = thread_id
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º thread_id:{thread_id}")
    print(f"user_chat_sessions:{user_chat_sessions}")
    print(f"user_chat_sessions[chat_id]:{ user_chat_sessions[chat_id]}")
    bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞.")


@bot.message_handler(commands=['exit'])
def exit_match(message):
    chat_id = message.chat.id
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ msg_hndlr_exit:{chat_id}")
    print(f"user_chat_sessions:{user_chat_sessions}")
    if chat_id in user_chat_sessions:
        del user_chat_sessions[chat_id]
        del error_counters[chat_id]  # –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.send_message(chat_id, "–†–∞–¥ –ø–æ–º–æ—á—å!")
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –∞–≥–µ–Ω—Ç–æ–º.")


@bot.message_handler(func=lambda message: message.chat.id in user_chat_sessions)
def chat_with_agent(message):
    chat_id = message.chat.id

    thread_id = user_chat_sessions[chat_id]
    print(f"thread_id:{thread_id}")
    user = user_data.get(chat_id)
    print(f"user:{user}")
    passport_id = user["passport_id"]

    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ msg_hndlr_exit:{chat_id}")
    print(f"user_chat_sessions:{user_chat_sessions}")

    config = {"configurable": {"thread_id": thread_id,"passport_id": passport_id}}
    print(f"\nPassport and thread config:{config}")
    try:
        context = AIMessage(content=f"–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{passport_id}")
        print(f"context_message:{context}")
        response = agent.invoke({
            "messages": [
                context,
                ("user", message.text)
            ]
        }, config={"configurable": {"thread_id": thread_id}})

        bot.send_message(chat_id, response["messages"][-1].content)
        error_counters[chat_id] = 0

    except Exception as e:
        error_counters[chat_id] += 1
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, f"ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏! ü§ñ")
        print(f"num_consecutive_errors:{error_counters[chat_id]}")
        if error_counters[chat_id] >= 3:
            del user_chat_sessions[chat_id]
            del error_counters[chat_id]
            bot.send_message(chat_id, f"ü§ñ –í—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ :( \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –ø–æ–ø–æ–∑–∂–µ! ü§ñ")

bot.polling(none_stop=True)


